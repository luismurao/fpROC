[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Luis Osorio-Olvera. Author, maintainer. Marlon E. Cobos. Author. Rusby G. Contreras-Díaz. Author. Weverton Trindade. Contributor. Luis F. Arias-Giraldo. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Osorio-Olvera L, Cobos M, Contreras-Díaz R (2025). fpROC: Fast partial ROC test. R package version 0.1.0, https://luismurao.github.io/fpROC/.","code":"@Manual{,   title = {fpROC: Fast partial ROC test},   author = {Luis Osorio-Olvera and Marlon E. Cobos and Rusby G. Contreras-Díaz},   year = {2025},   note = {R package version 0.1.0},   url = {https://luismurao.github.io/fpROC/}, }"},{"path":"/index.html","id":"fproc-","dir":"","previous_headings":"","what":"Fast partial ROC test","title":"Fast partial ROC test","text":"package features optimized C++ code computing partial ROC. Parallelization using OpenMP (OMP) achieved assistance DeepSeek AI Assistant (https://deepseek.com). goal fpROC …","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast partial ROC test","text":"can install development version fpROC GitHub :","code":"# install.packages(\"pak\") pak::pak(\"luismurao/fpROC\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Fast partial ROC test","text":"package can work numerical vectors terra SpatRaster objects. example using numerical data example using terra SpatRaster objects.","code":"set.seed(999) # With numeric vectors test_data <- rnorm(100) pred_data <- rnorm(100) result <- fpROC::auc_metrics(test_prediction = test_data, prediction = pred_data) set.seed(999) # With SpatRaster library(terra) #> terra 1.8.54 r <- terra::rast(ncol=10, nrow=10) values(r) <- rnorm(ncell(r)) result <- fpROC::auc_metrics(test_prediction = test_data, prediction = r)"},{"path":"/index.html","id":"acknowledgments","dir":"","previous_headings":"","what":"Acknowledgments","title":"Fast partial ROC test","text":"CONACYT Ciencia de Frontera CF-2023--1156. Laboratorio Nacional de Biología del Cambio Climático, SECIHTI, México. PAPIIT-UNAM IA202824 PAPIIT-UNAM IA203922.RGC-D thanks Dirección General de Asuntos del Personal Académico (DGAPA) UNAM, Secretaría de Ciencia, Humanidades, Tecnología e Innovación postdoctoral scholarship.","code":""},{"path":"/reference/auc_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Partial and complete Area Under the Curve (AUC) Metrics — auc_metrics","title":"Calculate Partial and complete Area Under the Curve (AUC) Metrics — auc_metrics","text":"Computes partial AUC ratios model predictions random curves specified threshold, options sampling iterations. Handles numeric vectors SpatRaster inputs.","code":""},{"path":"/reference/auc_metrics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Partial and complete Area Under the Curve (AUC) Metrics — auc_metrics","text":"","code":"auc_metrics(   test_prediction,   prediction,   threshold = 5,   sample_percentage = 50,   iterations = 500,   compute_full_auc = TRUE )"},{"path":"/reference/auc_metrics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Partial and complete Area Under the Curve (AUC) Metrics — auc_metrics","text":"test_prediction Numeric vector test prediction values (e.g., model outputs) prediction Numeric vector SpatRaster object containing prediction values threshold Percentage threshold partial AUC calculation (default = 5) sample_percentage Percentage test data sample (default = 50) iterations Number iterations estimating bootstrap statistics (default = 500) compute_full_auc Logical. TRUE, complete AUC values computed","code":""},{"path":"/reference/auc_metrics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Partial and complete Area Under the Curve (AUC) Metrics — auc_metrics","text":"list containing: input variability: List NA values AUC metrics Otherwise: Matrix AUC results.","code":""},{"path":"/reference/auc_metrics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Partial and complete Area Under the Curve (AUC) Metrics — auc_metrics","text":"Partial ROC calculated following Peterson et al. (2008; http://dx.doi.org/10.1016/j.ecolmodel.2007.11.008). function calculates partial AUC ratios : Validating input types completeness Handling NA values SpatRaster conversion Checking prediction variability Computing AUC metrics using optimized C++ code prediction values variability (equal), function returns NA values warning.","code":""},{"path":"/reference/auc_metrics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate Partial and complete Area Under the Curve (AUC) Metrics — auc_metrics","text":"Peterson, .T. et al. (2008) Rethinking receiver operating characteristic analysis applications ecological niche modeling. Ecol. Modell., 213, 63–72.","code":""},{"path":"/reference/auc_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Partial and complete Area Under the Curve (AUC) Metrics — auc_metrics","text":"","code":"# With numeric vectors test_data <- rnorm(100) pred_data <- rnorm(100) result <- fpROC::auc_metrics(test_prediction = test_data, prediction = pred_data)  # With SpatRaster library(terra) #> terra 1.8.54 r <- terra::rast(ncol=10, nrow=10) values(r) <- rnorm(ncell(r)) result <- fpROC::auc_metrics(test_prediction = test_data, prediction = r)"},{"path":"/reference/auc_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel AUC and partial AUC calculation with optimized memory usage — auc_parallel","title":"Parallel AUC and partial AUC calculation with optimized memory usage — auc_parallel","text":"Computes bootstrap estimates partial complete AUC using parallel processing optimized binning.","code":""},{"path":"/reference/auc_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel AUC and partial AUC calculation with optimized memory usage — auc_parallel","text":"","code":"auc_parallel(   test_prediction,   prediction,   threshold = 5,   sample_percentage = 50,   iterations = 500L,   compute_full_auc = TRUE,   n_bins = 500L )"},{"path":"/reference/auc_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel AUC and partial AUC calculation with optimized memory usage — auc_parallel","text":"test_prediction Numeric vector test prediction values prediction Numeric vector model predictions (background suitability data) threshold Percentage threshold partial AUC calculation (default = 5.0) sample_percentage Percentage test data sample iteration (default = 50.0) iterations Number bootstrap iterations (default = 500) compute_full_auc Boolean indicating whether compute complete AUC (default = TRUE) n_bins Number bins discretization (default = 500)","code":""},{"path":"/reference/auc_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel AUC and partial AUC calculation with optimized memory usage — auc_parallel","text":"numeric matrix `iterations` rows 4 columns containing: auc_complete: Complete AUC (NA compute_full_auc = FALSE) auc_pmodel: Partial AUC model (sensitivity > 1 - threshold/100) auc_prand: Partial AUC random model (reference) ratio: Ratio model AUC random AUC (model/reference)","code":""},{"path":"/reference/auc_parallel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parallel AUC and partial AUC calculation with optimized memory usage — auc_parallel","text":"function implements highly optimized AUC calculation pipeline: 1. Cleans input data (removes non-finite values) 2. Combines background test predictions 3. Performs range-based binning (discretization) 4. Computes cumulative distribution background predictions 5. Runs bootstrap iterations parallel:    - Samples test predictions    - Computes sensitivity-specificity curves    - Calculates partial complete AUC Key optimizations: - OpenMP parallelization binning bootstrap - Vectorized operations using Armadillo","code":""},{"path":"/reference/auc_parallel.html","id":"partial-auc","dir":"Reference","previous_headings":"","what":"Partial AUC","title":"Parallel AUC and partial AUC calculation with optimized memory usage — auc_parallel","text":"partial AUC focuses high-sensitivity region defined : Sensitivity > 1 - (threshold/100)","code":""},{"path":[]},{"path":"/reference/auc_parallel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parallel AUC and partial AUC calculation with optimized memory usage — auc_parallel","text":"","code":"# Basic usage with random data set.seed(123) bg_pred <- runif(1000)   # bg predictions test_pred <- runif(500)     # Test predictions  # Compute only partial AUC metrics (500 iterations) results <- auc_parallel(test_pred, bg_pred,                             threshold = 5.0,                             iterations = 100)  # Reduced for example  # View first 5 iterations head(results, 5) #>          [,1]     [,2]      [,3]      [,4] #> [1,] 0.510884 0.059520 0.0591395 1.0064339 #> [2,] 0.498444 0.029478 0.0295500 0.9975635 #> [3,] 0.510692 0.035312 0.0353520 0.9988685 #> [4,] 0.489294 0.062342 0.0619520 1.0062952 #> [5,] 0.489710 0.035246 0.0353520 0.9970016  # Summarize results (assume complete AUC was not computed) summary <- summarize_auc_results(results, has_complete_auc = FALSE)  # Interpretation: # - auc_pmodel: Model's partial AUC (higher is better) # - auc_prand: Random model's partial AUC # - ratio: Model AUC / Random AUC (>1 indicates better than random)  # Compute both partial and complete AUC full_results <- auc_parallel(test_pred, bg_pred,                                  compute_full_auc = TRUE,                                  iterations = 100)"},{"path":"/reference/fpROC-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fpROC: Fast partial ROC test — fpROC-package","title":"fpROC: Fast partial ROC test — fpROC-package","text":"package features optimized C++ code computing partial ROC. Partial ROC calculated following Peterson et al. (2008) doi:10.1016/j.ecolmodel.2007.11.008 . Parallelization using OpenMP (OMP) achieved assistance DeepSeek AI Assistant (https://www.deepseek.com/).","code":""},{"path":[]},{"path":"/reference/fpROC-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fpROC: Fast partial ROC test — fpROC-package","text":"Maintainer: Luis Osorio-Olvera luismurao@gmail.com (ORCID) Authors: Marlon E. Cobos manubio13@gmail.com (ORCID) Rusby G. Contreras-Díaz rusby.contreras.diaz@gmail.com (ORCID) contributors: Weverton Trindade wevertonf1993@gmail.com (ORCID) [contributor] Luis F. Arias-Giraldo lfarias.giraldo@gmail.com (ORCID) [contributor]","code":""},{"path":"/reference/summarize_auc_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Bootstrap AUC Results — summarize_auc_results","title":"Summarize Bootstrap AUC Results — summarize_auc_results","text":"Computes aggregated statistics bootstrap AUC iterations. function processes raw output auc_parallel produce meaningful summary metrics partial ROc test.","code":""},{"path":"/reference/summarize_auc_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Bootstrap AUC Results — summarize_auc_results","text":"","code":"summarize_auc_results(auc_results, has_complete_auc)"},{"path":"/reference/summarize_auc_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Bootstrap AUC Results — summarize_auc_results","text":"auc_results Numeric matrix output auc_parallel (dimensions: n_iterations x 4) has_complete_auc Boolean indicating whether complete AUC computed bootstrap iterations (affects first summary column)","code":""},{"path":"/reference/summarize_auc_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Bootstrap AUC Results — summarize_auc_results","text":"numeric matrix 1 row 5 columns containing: mean_complete_auc: Mean complete AUC values (NA computed) mean_pauc: Mean partial AUC values model mean_pauc_rand: Mean partial AUC values random model (reference) mean_auc_ratio: Mean AUC ratios (model/random) prop_ratio_gt1: Proportion iterations ratio > 1 (performance better random)","code":""},{"path":"/reference/summarize_auc_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarize Bootstrap AUC Results — summarize_auc_results","text":"function: 1. Filters iterations non-finite ratio values (handles bootstrap failures) 2. Computes means AUC metric across valid iterations 3. Calculates proportion iterations model outperforms random (ratio > 1).    way computing p-value test. Special handling: - Returns NAs valid iterations exist - First column (complete AUC) depends has_complete_auc parameter - Handles NaN/Inf values safely filtering","code":""},{"path":"/reference/summarize_auc_results.html","id":"interpretation-guide","dir":"Reference","previous_headings":"","what":"Interpretation Guide","title":"Summarize Bootstrap AUC Results — summarize_auc_results","text":"- mean_auc_ratio > 1: Model generally outperforms random predictions - prop_ratio_gt1 = 1.9: 90 - mean_pauc: Absolute performance measure (higher = better discrimination)","code":""},{"path":[]},{"path":"/reference/summarize_auc_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Bootstrap AUC Results — summarize_auc_results","text":"","code":"# Basic usage with simulated results set.seed(123) # Simulate bootstrap output (100 iterations x 4 metrics) auc_matrix <- cbind(   complete = rnorm(100, 0.85, 0.05),  # Complete AUC   pmodel   = rnorm(100, 0.15, 0.03),  # Partial model AUC   prand    = rnorm(100, 0.08, 0.02),  # Partial random AUC   ratio    = rnorm(100, 1.9, 0.4)     # Ratio )  # Summarize results (assuming complete AUC was computed) summary <- summarize_auc_results(auc_matrix, has_complete_auc = TRUE)  # Typical output interpretation: # - mean_complete_auc: 0.85 (good overall discrimination) # - mean_pauc: 0.15 (absolute partial AUC) # - mean_pauc_rand: 0.08 (random expectation) # - mean_auc_ratio: 1.9 (model 90% better than random) # - prop_ratio_gt1: 0.98 (98% of iterations showed model > random)  # Real-world usage with actual AUC function output # \\donttest{ # First run bootstrap AUC calculation bg_pred <- runif(1000) test_pred <- runif(500) auc_output <- auc_parallel(   test_prediction = test_pred,   prediction = bg_pred,   iterations = 100 )  # Then summarize results (complete AUC not computed in this case) summary <- summarize_auc_results(auc_output, has_complete_auc = FALSE)  # Print summary statistics colnames(summary) <- c(\"mean_complete_auc\", \"mean_pauc\",                       \"mean_pauc_rand\", \"mean_pAUCratio\", \"p_value\") print(summary) #>      mean_complete_auc  mean_pauc mean_pauc_rand mean_pAUCratio p_value #> [1,]                NA 0.05115536     0.05093812       1.003816    0.24  # Expected output structure: #      mean_complete_auc mean_pauc mean_pauc_rand mean_pAUCratio    p_value # [1,]               NA     0.152          0.083       1.83           0.94 # }"},{"path":"/reference/trap_roc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Area Under Curve (AUC) using trapezoidal rule — trap_roc","title":"Calculate Area Under Curve (AUC) using trapezoidal rule — trap_roc","text":"Computes area curve using trapezoidal rule numerical integration.","code":""},{"path":"/reference/trap_roc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Area Under Curve (AUC) using trapezoidal rule — trap_roc","text":"","code":"trap_roc(x, y)"},{"path":"/reference/trap_roc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Area Under Curve (AUC) using trapezoidal rule — trap_roc","text":"x Numeric vector (arma::vec) x-coordinates (sorted increasing order) y Numeric vector (arma::vec) y-coordinates corresponding x-coordinates","code":""},{"path":"/reference/trap_roc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Area Under Curve (AUC) using trapezoidal rule — trap_roc","text":"numerical value representing computed area curve double precision value.","code":""},{"path":"/reference/trap_roc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Area Under Curve (AUC) using trapezoidal rule — trap_roc","text":"trapezoidal rule approximates area curve dividing trapezoids. pair adjacent points (x[], y[]) (x[+1], y[+1]), calculates area trapezoid formed. total AUC sum individual trapezoid areas. Special cases: - Returns 0 fewer 2 points (area can calculated) - Handles increasing decreasing x values (though typically x increasing ROC curves)","code":""},{"path":[]},{"path":"/reference/trap_roc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Area Under Curve (AUC) using trapezoidal rule — trap_roc","text":"","code":"# R code example: x <- c(0, 0.5, 1, 1.5, 2) y <- c(0, 0.7, 0.9, 0.95, 1) trap_roc(x, y) #> [1] 1.525"}]
