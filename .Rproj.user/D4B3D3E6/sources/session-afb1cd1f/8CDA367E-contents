// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// [[Rcpp::plugins
#include <RcppArmadillo.h> #include <RcppParallel.h> #ifdef _OPENMP #include <omp.h> #endif   // [[Rcpp::plugins(openmp)]]  // [[Rcpp::depends(RcppArmadillo, RcppParallel)]]  // [[Rcpp::plugins(cpp11);
RcppExport SEXP _fpROC_[[Rcpp::plugins(SEXP [[Rcpp::depends(RcppArmadilloSEXP, SEXP [[Rcpp::plugins(cpp11SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< openmp)]]  // >::type [[Rcpp::depends(RcppArmadillo([[Rcpp::depends(RcppArmadilloSEXP);
    Rcpp::traits::input_parameter< RcppParallel)]]  // >::type [[Rcpp::plugins(cpp11([[Rcpp::plugins(cpp11SEXP);
    rcpp_result_gen = Rcpp::wrap([[Rcpp::plugins([[Rcpp::depends(RcppArmadillo, [[Rcpp::plugins(cpp11));
    return rcpp_result_gen;
END_RCPP
}
// auc_par_arma_opt
arma::mat auc_par_arma_opt(const arma::vec& test_prediction, const arma::vec& prediction, double threshold, double sample_percentage, int iterations, bool compute_full_auc, int n_bins);
RcppExport SEXP _fpROC_auc_par_arma_opt(SEXP test_predictionSEXP, SEXP predictionSEXP, SEXP thresholdSEXP, SEXP sample_percentageSEXP, SEXP iterationsSEXP, SEXP compute_full_aucSEXP, SEXP n_binsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type test_prediction(test_predictionSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prediction(predictionSEXP);
    Rcpp::traits::input_parameter< double >::type threshold(thresholdSEXP);
    Rcpp::traits::input_parameter< double >::type sample_percentage(sample_percentageSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< bool >::type compute_full_auc(compute_full_aucSEXP);
    Rcpp::traits::input_parameter< int >::type n_bins(n_binsSEXP);
    rcpp_result_gen = Rcpp::wrap(auc_par_arma_opt(test_prediction, prediction, threshold, sample_percentage, iterations, compute_full_auc, n_bins));
    return rcpp_result_gen;
END_RCPP
}
// summarize_auc_results
arma::mat summarize_auc_results(const arma::mat& auc_results, bool has_complete_auc);
RcppExport SEXP _fpROC_summarize_auc_results(SEXP auc_resultsSEXP, SEXP has_complete_aucSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type auc_results(auc_resultsSEXP);
    Rcpp::traits::input_parameter< bool >::type has_complete_auc(has_complete_aucSEXP);
    rcpp_result_gen = Rcpp::wrap(summarize_auc_results(auc_results, has_complete_auc));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fpROC_[[Rcpp::plugins", (DL_FUNC) &_fpROC_[[Rcpp::plugins, 2},
    {"_fpROC_auc_par_arma_opt", (DL_FUNC) &_fpROC_auc_par_arma_opt, 7},
    {"_fpROC_summarize_auc_results", (DL_FUNC) &_fpROC_summarize_auc_results, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_fpROC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
